# 安装
vi  /etc/yum.repos.d/docker.repo
	[dockerrepo]
	name=Docker Repository
	baseurl=https://yum.dockerproject.org/repo/main/centos/$releasever/
	enabled=1
	gpgcheck=1
	gpgkey=https://yum.dockerproject.org/gpg

yum install docker-engine


# 加速器
vi /etc/docker/daemon.json

	{
	"registry-mirrors": ["https://registry.docker-cn.com","https://9zh8kwqg.mirror.aliyuncs.com"]
	}

systemctl daemon-reload
systemctl restart docker

# 安装 java
docker search java
docker pull java

# 查看镜像
docker images

# 导出镜像
docker save java > /home/java.tar.gz

# 导入镜像
docker load < /home/java.tar.gz

# 删除镜像
docker rmi java

# 启动容器
run -it --name myjava java bash
run -it --name myjava -p 9000:8080 -p 9001:8085 java bash # 将8085端口 映射到 宿主机的 9001端口
run -it --name myjava -v /home/porject:/soft --privileged java bash # 将 /soft目录 映射到 宿主机的 /home/project目录

# 暂停 恢复
docker pause myjava 
docker unpause myjava

# 停止 开始
docker stop myjava 
docker start -i myjava

# 删除容器
docker rm myjava 

# 查看容器
docker ps -a

########################################### 4.2 pxc mysql 集群 ###############################################################
# 拉取 pxc 镜像
docker pull percona/percona-xtradb-cluster

# 创建内部网络
docker network create --subnet=172.18.0.0/24 net1 （172.17.0.X 是docker内带网段）

# 查看网络
docker inspect net1

# 删除网络
docker network rm net1

# 创建 docker 卷
docker volume create --name v1

# 查看 docker 卷
docker inspect v1

# 删除 docker 卷
docker volume rm v1

# 创建备份卷
docker volume create backup

# 创建 pxc 容器
docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root12345 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=root12345 -v v1:/var/lib/mysql -v backup:/data --privileged --name=node1 --net=net1 --ip 172.18.0.2 percona/percona-xtradb-cluster

# 创建 docker 集群
docker run -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD=root12345 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=root12345 -e CLUSTER_JOIN=node1 -v backup:/data -v v2:/var/lib/mysql --privileged --name=node2 --net=net1 --ip 172.18.0.3 percona/percona-xtradb-cluster
docker run -d -p 3308:3306 -e MYSQL_ROOT_PASSWORD=root12345 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=root12345 -e CLUSTER_JOIN=node1 -v backup:/data -v v3:/var/lib/mysql --privileged --name=node3 --net=net1 --ip 172.18.0.4 percona/percona-xtradb-cluster

# 进入docker容器
docker exec -it node1 /bin/bash

# 修改mysql配置文件 node.cnf
bash-4.2$ vi /etc/mysql/node.cnf
# 添加如下配置
skip-name-resolve=1

# 进入mysql 配置远程连接
mysql -u root
mysql> use mysql;
mysql> select host from user where user='root';
mysql> update user set host='%' where user='root';
mysql> flush privileges;

########################################### 4.3-4.5 负载均衡 Haproxy Keepalived ###############################################################
# 拉取镜像
docker pull haproxy

# 创建haproxy配置文件
touch /home/config/haproxy/haproxy.cfg  ## https://zhangge.net/5125.html

# 配置keepalived文件
vi /etc/keeplived/keepalived.conf

# 创建容器
docker run -it -d -p 4001:8888 -p 4002:3306 -v /home/config/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg -v /home/config/keepalived/keepalived.conf:/etc/keepalived/keepalived.conf --name h1 --privileged --net=net1 haproxy

# 进入容器
docker exec -it h1 bash

# 指定配置文件
haproxy -f /usr/local/etc/haproxy/haproxy.cfg

# 在 navicat mysql 创建用户
CREATE USER 'haproxy'@'%' IDENTIFIED BY '';

# 安装Keepalived
apt-get update
apt-get install keepalived

# 启动keepalived
service keepalived start

# 同理创建h2
docker run -it -d -p 4003:8888 -p 4004:3306 -v /home/config/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg -v /home/config/keepalived/keepalived.conf:/etc/keepalived/keepalived.conf --name h2 --privileged --net=net1 haproxy

# 在宿主机安装keepalived
yum install -y keepalived

# 宿主机配置keepalived
vi /etc/keepalived/keepalived.conf

# 宿主机 启动keepalived
service keepalived start

########################################### 异常重启计算机 节点无法启动 ###############################################################
docker inspect v1
vi /var/lib/docker/volumes/v1/_data/grastate.dat
safe_to_bootstrap: 1

########################################### 4.6 热备份数据 都在容器中操作 ###############################################################
# 更新 apt-get 安装热备工具
apt-get update
apt-get install percona-xtrabackup-24

# 全量备份
innobackupex --user=root --password=root12345 /data/backup/full

# 全量恢复(需要删除所有pxc容器)
rm -fr /var/lib/mysql/*

## 1.事务回滚
innobackupex --user=root --password=root12345 --apply-back /data/backup/full/2018-04-15_05-09-07

## 2.还原
innobackupex --user=root --password=root12345 --copy-back /data/backup/full/2018-04-15_05-09-07

########################################### 5.3 Redis 集群搭建 ###############################################################
docker pull yyyyttttwwww/redis

docker run -it -d --name r1 -p 5001:6379 -v /home/config/redis/redis.conf:/usr/redis/redis.conf --net=net1 --ip 172.18.0.7 redis bash

# 进入容器
cd /usr/redis/src

./redis-server ../redis.conf

# 安装redis-trib.rb
cp /usr/redis/src/redis-trib/rb /usr/redis/cluster/

cd /usr/redis/cluster

apt-get install ruby

apt-get install rubygems

gem install redis

./redis-trib.rb create --replicas 2 172.18.0.7:6379 172.18.0.8:6379 172.18.0.9:6379

########################################### 6.1-6.4 java ###############################################################
docker run -it -d --name j1 -v j1:/home/soft --net=host java

# 进入容器
nohup java -jar /home/soft/renren-fast.jar

# 安装 nginx
docker pull nginx
# 后端nginx
docker run -it -d --name n1 -v /home/n1/nginx.conf:/etc/nginx/nginx.conf --net=host --privileged nginx
# 前端nginx
docker run -it -d --name fn1 -v /home/fn1/nginx.conf:/etc/nginx/nginx.conf -v /home/fn1/renren-vue:/home/fn1/renren-vue --net=host --privileged nginx

########################################### 7.1-7.2 swarm 不适合用于 数据库和Redis ###############################################################
# 初始化
docker swarm init --listen-addr ip:port --advertise-addr ip

# 各个节点加入swarm
docker swarm join token manager
docker swarm join token worker

# 查看节点
docker node ls

# 查看网络
docker network ls

# 创建共享网络
docker network create -d overlay --attachable swarm_test

# 主动退出集群
docker swarm leave --force

# 被动退出集群
docker node demote <node-id>
docker stop node1
docker node rm <node-id>

########################################### 7.3 Portainer ###############################################################
docker pull portainer/portainer

# 修改docker 配置文件
vi /etc/sysconfig/docker
## 加入
OPTIONS='-Htcp://0.0.0.0:2375 -H unix://var/run/docker.sock'

# 启动Portainer
docker run -d -p 9000:9000 portainer/portainer -H tcp://宿主机IP:2375
